{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","components/utils.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","item","id","name","email","CardList","items","map","key","Search","state","value","handleChange","e","setState","target","onSearchInfoChange","this","type","placeholder","onChange","React","PureComponent","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","Component","App","searchValue","fetch","then","response","json","users","filteredItems","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TAGaA,G,YAAO,SAACC,GACjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,KAAKC,GAArC,4BACtB,gCAAOL,EAAMI,KAAKE,KAAlB,KACA,+BAAMN,EAAMI,KAAKG,MAAjB,QCHKC,G,MAAW,SAACR,GAAD,OACpB,yBAAKC,UAAU,aACVD,EAAMS,MAAMC,KAAI,SAAAN,GAAI,OACjB,kBAAC,EAAD,CAAMO,IAAKP,EAAKC,GAAID,KAAMA,UCJzBQ,G,MAAb,2MACIC,MAAM,CACFC,MAAO,IAFf,EAKIC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEH,MAAOE,EAAEE,OAAOJ,QAChC,EAAKd,MAAMmB,mBAAmBH,EAAEE,OAAOJ,QAP/C,wEAWO,OACA,2BACCb,UAAU,SACVa,MAAOM,KAAKP,MAAMC,MAClBO,KAAK,SACLC,YAAaF,KAAKpB,MAAMsB,YACxBC,SAAUH,KAAKL,mBAjBvB,GAA4BS,IAAMC,gBCDrBC,EAAb,YACE,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXc,KAAM,IAAIC,MAHK,EADrB,iFAQuB,IAAD,OAClBR,KAAKS,QAAUC,aACb,kBAAM,EAAKC,SAAQ,OAVzB,6CAeIC,cAAcZ,KAAKS,WAfvB,6BAmBIT,KAAKH,SAAS,CAAEU,KAAM,IAAIC,SAnB9B,+BAuBI,OACE,6BACE,qCAAWR,KAAKP,MAAMc,KAAKM,qBAA3B,UAzBR,GAA2BT,IAAMU,WC0ClBC,E,YArCb,aAAe,IAAD,8BACZ,+CAeFhB,mBAAqB,SAACiB,GACpB,EAAKnB,SAAS,CACZmB,iBAfF,EAAKvB,MAAQ,CACXJ,MAAO,GACP2B,YAAa,IALH,E,iFAUO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKxB,SAAS,CAAER,MAAOgC,S,+BAShC,IAAD,EACwBrB,KAAKP,MAA5BJ,EADD,EACCA,MAAO2B,EADR,EACQA,YACTM,EAAgBjC,EAAMkC,QAAO,SAAAvC,GAAI,OAAIA,EAAKE,KAAKsC,cAAcC,SAAST,EAAYQ,kBAExF,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,6CACA,kBAAC,EAAD,CAAQqB,YAAY,SAASH,mBAAoBC,KAAKD,qBACtD,kBAAC,EAAD,CAAUV,MAAQiC,S,GAhCRR,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.d7d42a99.chunk.js","sourcesContent":["import React from 'react'\nimport './card.styles.css'\n\nexport const Card = (props) => {\n    return <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.item.id}?set=set4&size=180x200`} />\n        <h2> { props.item.name } </h2> \n        <p> { props.item.email } </p>\n    </div>\n}","import React from 'react'\nimport { Card } from '../card/card.component'\nimport './card-list.styles.css'\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n        {props.items.map(item => (\n            <Card key={item.id} item={item} />\n        ))}\n    </div>\n)","import React from 'react'\nimport './search.styles.css'\n\nexport class Search extends React.PureComponent {\n    state={\n        value: ''\n    }\n\n    handleChange = (e) => {\n        this.setState({ value: e.target.value })\n        this.props.onSearchInfoChange(e.target.value);\n    }\n\n   render(){\n       return ( \n       <input\n        className='search'\n        value={this.state.value}\n        type='search'\n        placeholder={this.props.placeholder}\n        onChange={this.handleChange}\n    />);\n    }\n}","import React from \"react\";\n\nexport class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      date: new Date()\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(), 1000\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({ date: new Date() })\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport { Search } from './components/search/search.component'\nimport { Clock } from './components/utils'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      items: [],\n      searchValue: ''\n    }\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ items: users }))\n  }\n\n  onSearchInfoChange = (searchValue) => {\n    this.setState({\n      searchValue\n    })\n  }\n\n  render() {\n    const { items, searchValue } = this.state\n    const filteredItems = items.filter(item => item.name.toLowerCase().includes(searchValue.toLowerCase()))\n\n    return (\n      <div className='App'>\n        <Clock />\n        <h1>Items Rolodex</h1>\n        <Search placeholder='Search' onSearchInfoChange={this.onSearchInfoChange} />\n        <CardList items={ filteredItems } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}